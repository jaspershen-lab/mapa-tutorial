# SimCluster: Traditional Similarity-based Clustering

SimCluster is the traditional pathway clustering method in mapa that groups related pathways into functional modules based on gene/metabolite overlap similarity. This method uses established similarity metrics (Jaccard, Dice, etc.) and semantic similarity measures to identify functionally related pathways.

```{r}
#| eval: false

library(mapa)
```

## Overview

SimCluster works in two main steps:

1.  **`merge_pathways()`**: Groups pathways within each database (GO, KEGG, Reactome) based on their similarity
2.  **`merge_modules()`**: Combines modules across different databases to create final functional modules

This approach leverages well-established similarity metrics and has been widely validated in pathway analysis literature.

### Step 1: Merge Pathways Within Databases

The `merge_pathways()` function calculates similarity between pathways within each database and groups similar pathways into modules.

::: panel-tabset
##### Gene-based Analysis

```{r}
#| eval: false

enriched_modules <- 
  merge_pathways(
    object = enriched_pathways,
    database = c("go", "kegg", "reactome"),
    
    # Statistical cutoffs
    p.adjust.cutoff.go = 0.05,
    p.adjust.cutoff.kegg = 0.05,
    p.adjust.cutoff.reactome = 0.05,
    count.cutoff.go = 5,
    count.cutoff.kegg = 5,
    count.cutoff.reactome = 5,
    
    # Similarity cutoffs
    sim.cutoff.go = 0.5,
    sim.cutoff.kegg = 0.5,
    sim.cutoff.reactome = 0.5,
    
    # Similarity methods
    measure.method.go = "Sim_XGraSM_2013",  # GO semantic similarity
    go.orgdb = org.Hs.eg.db,               # Required for GO analysis
    measure.method.kegg = "jaccard",        # Gene overlap similarity
    measure.method.reactome = "jaccard",    # Gene overlap similarity
    
    # Output options
    save_to_local = FALSE,
    path = "result"
  )

# --------------------
# GO database...
# Calculating similartiy matrix, it may take a while...
# Identifying modules...
# Done
# --------------------
# KEGG database...
# Calculating similartiy matrix, it may take a while...
# Identifying modules...
# Done
# --------------------
# Reactome database...
# Calculating similartiy matrix, it may take a while...
# Identifying modules...
# Done
# Done
```

##### Metabolite-based Analysis

```{r}
#| eval: false

met_enriched_modules <- 
  merge_pathways(
    object = met_enriched_pathways,
    database = c("hmdb", "metkegg"),
    
    # Statistical cutoffs for metabolites
    p.adjust.cutoff.hmdb = 0.05,
    p.adjust.cutoff.metkegg = 0.05,
    count.cutoff.hmdb = 5,
    count.cutoff.metkegg = 5,
    
    # Similarity settings
    sim.cutoff.hmdb = 0.5,
    sim.cutoff.metkegg = 0.5,
    measure.method.hmdb = "jaccard",
    measure.method.metkegg = "jaccard",
    
    save_to_local = FALSE
  )
```
:::

### Step 2: Merge Modules Across Databases

The `merge_modules()` function combines pathway modules from different databases into unified functional modules.

```{r}
#| eval: false

enriched_functional_modules <- 
  merge_modules(
    object = enriched_modules,
    sim.cutoff = 0.5,
    measure_method = "jaccard",
    cluster_method = "girvan newman",  # Options: "girvan newman", "binary cut", "hierarchical"
    save_to_local = FALSE,
    path = "result"
  )

# Calculating the similarity matrix...
# Identifying funcitonal modules...
# Done
```

## Similarity Methods Available

**GO Semantic Similarity Methods**

For GO terms, mapa calculates GO term similarity using the [simona](https://jokergoo.github.io/simona/) package, which supports multiple semantic similarity measures, such as:

| Method | Type | Description | Use Case |
|----------------|----------------|-----------------------|------------------|
| `Sim_XGraSM_2013` | Hybrid | Combines multiple similarity aspects | **Default**, good overall performance |
| `Sim_Wang_2007` | Structure-based | Based on GO graph structure and relationships | Emphasizes hierarchical relationships |
| `Sim_Lin_1998` | Information content-based | Uses information content of terms | Good for well-annotated organisms |
| `Sim_Resnik_1999` | Information content-based | Information content of most informative common ancestor | Conservative similarity measure |
| `Sim_FaITH_2010` | Hybrid | Functional annotation-based | Incorporates functional annotations |
| `Sim_Relevance_2006` | Information content-based | Relevance-based semantic similarity | Balances specificity and generality |

**Gene/Metabolite Overlap Similarity**

For KEGG, Reactome, and metabolite pathways:

| Method | Formula | Description | Use Case |
|-----------------|-----------------|----------------------|-----------------|
| `jaccard` | \|A ∩ B\| / \|A ∪ B\| | Jaccard index | **Default**, most commonly used |
| `dice` | 2 × \|A ∩ B\| / (\|A\| + \|B\|) | Dice coefficient | Emphasizes shared elements |
| `overlap` | \|A ∩ B\| / min(\|A\|, \|B\|) | Overlap coefficient | Good for pathways of different sizes |
| `kappa` | (Po - Pe) / (1 - Pe) | Cohen's kappa | Accounts for chance agreement |

::: callout-tip
For detailed explanations of similarity methods, see the [simona documentation](https://jokergoo.github.io/simona/articles/v05_term_similarity.html#ic-based-or-node-based-methods).
:::

## Clustering Methods

SimCluster offers three clustering algorithms:

1.  Girvan-Newman (Default)

    Community detection based on edge betweenness - good for identifying natural communities in networks.

    ```{r}
    #| eval: false
    cluster_method = "girvan newman"
    sim.cutoff = 0.5  # Only edges above this similarity are included
    ```

2.  Binary Cut

    Uses the [simplifyEnrichment](https://doi.org/10.1016/j.gpb.2022.04.008) algorithm - efficient for large datasets.

    ```{r}
    #| eval: false
    cluster_method = "binary cut"
    sim.cutoff = 0.5  # Cutoff for cutting the dendrogram (Higher values: More permissive, larger modules)
    ```

3.  Hierarchical Clustering

    Traditional hierarchical clustering with distance thresholds.

    ```{r}
    #| eval: false
    cluster_method = "hierarchical"
    hclust.method = "complete"  # Linkage method
    sim.cutoff = 0.5           # Height for cutting dendrogram (Higher values: More permissive, larger modules)
    ```

## Parameter Guidelines

### Statistical Cutoffs

-   **p.adjust.cutoff**: Use 0.05 as standard, 0.01 for stricter filtering
-   **count.cutoff**: Minimum 5 genes/metabolites, increase for larger datasets

### Similarity Cutoffs

-   **sim.cutoff**: 0.5 is a good starting point
    -   Lower values (0.3-0.4): More permissive, larger modules
    -   Higher values (0.6-0.8): More stringent, smaller modules

### Method Selection

-   **For GO**: `Sim_XGraSM_2013` balances multiple similarity aspects
-   **For gene overlap**: `jaccard` is most commonly used and interpretable
-   **For clustering**: `girvan newman` works well for most datasets

## Results Interpretation

After running SimCluster, examine the results:

```{r}
#| eval: false
# View analysis summary
enriched_functional_modules

# Access functional modules
head(enriched_functional_modules@merged_module$functional_module_result)

# View modules within specific databases
head(enriched_functional_modules@merged_pathway_go$module_result)
head(enriched_functional_modules@merged_pathway_kegg$module_result)
```

Key result columns:

-   **module**: Module identifier (e.g., "Module_1", "go_Module_2")
-   **module_annotation**: Representative annotation for the module
-   **module_content**: All pathways/terms grouped in this module
-   **Count**: Number of genes/metabolites in the module
-   **p_adjust**: Best (lowest) adjusted p-value among pathways in the module

## Advantages of SimCluster

1.  **Well-established**: Uses proven similarity metrics with extensive literature support
2.  **Interpretable**: Clear biological meaning behind gene/metabolite overlap
3.  **Fast**: Efficient computation for most dataset sizes
4.  **Flexible**: Multiple similarity methods and clustering options
5.  **Robust**: Less sensitive to parameter changes

## When to Use SimCluster

-   Standard pathway analysis workflows
-   When interpretability is crucial
-   Smaller to medium-sized datasets
-   When computational resources are limited
-   For comparison with published studies using traditional methods

## Next Steps

Continue to [EmbedCluster](04_embed_cluster.qmd) to learn about the advanced text embedding approach, or proceed to [LLM Interpretation](05_llm_interpretation.qmd) to add AI-powered functional annotations to your modules.
