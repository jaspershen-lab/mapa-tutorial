[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mapa tutorial",
    "section": "",
    "text": "Overview",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#mapa-functional-module-annotation-for-pathway-analysis-results-using-llm",
    "href": "index.html#mapa-functional-module-annotation-for-pathway-analysis-results-using-llm",
    "title": "mapa tutorial",
    "section": "mapa: Functional Module Annotation for Pathway Analysis Results Using LLM",
    "text": "mapa: Functional Module Annotation for Pathway Analysis Results Using LLM\nmapa is a streamlined workflow for pathway-enrichment analysis and enrichment result interpretation that turns large omics datasets into clear biological insight. It:\n\nDetects enriched pathways from your data via over-representation analysis (ORA) or gene set enrichment analysis (GSEA).\nClusters overlapping or functional-related pathways into functional modules, so every informative pathway—not just the “top 5 or 10”—contributes to the story.\nSummarises each module with large-language models (LLM) (e.g., ChatGPT), linking the results to the latest findings in literature from PubMed.\n\nThe outcome is a fast, reproducible, and user-friendly pipeline that reduces redundancy and delivers biologically meaningful interpretations for enrichment results.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#aim-of-this-tutorial",
    "href": "index.html#aim-of-this-tutorial",
    "title": "mapa tutorial",
    "section": "Aim of This Tutorial",
    "text": "Aim of This Tutorial\nThis guide walks you through the two faces of mapa: the R package for command-line workflows and the Shiny app for point-and-click exploration. By the end, with your gene/metabolite list as input, you will be able to:\n\nMerge overlapping enriched pathways into informative functional modules.\nGenerate biological interpretations of each module with large-language models.\nCreate publication-ready visuals of enrichment results, module networks, and pathway–molecule relationships.\nExport a comprehensive report that gathers every table, figure, and LLM-based summary in one place.\n\nWhether you favour the command line or a browser, the tutorial gives you everything you need to apply MAPA confidently in your bioinformatics projects.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "01_package_installation.html",
    "href": "01_package_installation.html",
    "title": "1  Installation",
    "section": "",
    "text": "Follow the steps below to install the latest development version of mapa from GitHub (the script first installs BiocManager and remotes if you don’t have them):\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n install.packages(\"BiocManager\") \n}\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n install.packages(\"remotes\") \n}\n\nremotes::install_github(\n  \"jaspershen-lab/mapa\",\n  dependencies = TRUE,\n  repos = BiocManager::repositories(),\n  upgrade = \"ask\"\n)",
    "crumbs": [
      "MAPA R Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "01_shinyapp_installation.html",
    "href": "01_shinyapp_installation.html",
    "title": "9  Installation",
    "section": "",
    "text": "Follow the steps below to install the latest development version of mapa shinyapp from GitHub (the script first installs BiocManager, remotes, and mapa if you don’t have them):\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n install.packages(\"BiocManager\") \n}\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n install.packages(\"remotes\") \n}\n\nremotes::install_github(\n  \"jaspershen-lab/mapa\",\n  dependencies = TRUE,\n  repos = BiocManager::repositories(),\n  upgrade = \"ask\"\n)\n\nremotes::install_github(\n  \"jaspershen-lab/mapashiny\",\n  dependencies = TRUE,\n  repos        = BiocManager::repositories(),\n  upgrade      = \"ask\"\n)",
    "crumbs": [
      "MAPA Shiny App",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "02_input.html",
    "href": "02_input.html",
    "title": "2  Data input and preprocessing",
    "section": "",
    "text": "2.1 Input Data Format Requirements\nThis chapter covers the input data requirements for mapa analysis, including the expected data formats and data preprocessing for converting your data to the required format.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#input-data-format-requirements",
    "href": "02_input.html#input-data-format-requirements",
    "title": "2  Data input and preprocessing",
    "section": "",
    "text": "2.1.1 Gene Expression Data\nmapa accepts gene expression data with flexible identifier requirements, depending on your analysis type. Your input data must contain at least one of the following identifier columns:\n\nensembl: Ensembl gene IDs (e.g., “ENSG00000141510”)\nentrezid: NCBI Entrez gene IDs (e.g., “7157”)\nuniprot: UniProtKB accession numbers (e.g., “P04637”)\nsymbol: Gene symbols (e.g., “TP53”)\n\n\n\n\n\n\n\nImportant\n\n\n\nColumn names must be in lowercase.\n\n\n\nOver-Representation Analysis (ORA)Gene Set Enrichment Analysis (GSEA)\n\n\nFor ORA, you only need one identifier column plus any additional metadata:\n\n# Example ORA input data\n\nora_data &lt;- readr::read_csv(\"examples/example_ora_gene_data.csv\", show_col_types = FALSE)\nhead(ora_data)\n\n# A tibble: 6 × 2\n  variable_id ensembl        \n  &lt;chr&gt;       &lt;chr&gt;          \n1 gene_1      ENSG00000100097\n2 gene_2      ENSG00000139193\n3 gene_3      ENSG00000163513\n4 gene_4      ENSG00000127863\n5 gene_5      ENSG00000115604\n6 gene_6      ENSG00000153002\n\n\n\n\nFor GSEA, you need:\n\nOne identifier column (ensembl, entrezid, uniprot, or symbol)\nAn order_by column containing numeric values to rank genes (This is used to create the ranked gene list required for GSEA. Common choices like Log2 fold change values, pvalue)\n\n\n# Example GSEA input data\n\ngsea_data &lt;- readr::read_csv(\"examples/example_gsea_data.csv\", show_col_types = FALSE)\nhead(gsea_data)\n\n# A tibble: 6 × 8\n  variable_id ensembl     genename genetype length     fc p_value p_value_adjust\n  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;\n1 gene_1      ENSG000001… ATPase … protein…  26084 0.358  5.17e-3        0.0202 \n2 gene_11     ENSG000001… peroxis… protein…   9834 0.234  2.61e-4        0.00514\n3 gene_12     ENSG000002… small n… pseudo      214 0.0665 8.84e-3        0.0277 \n4 gene_16     ENSG000001… SKI pro… protein…  82826 0.232  2.20e-4        0.00490\n5 gene_29     ENSG000001… phospho… protein…  79553 0.0373 7.20e-3        0.0244 \n6 gene_31     ENSG000001… splA/ry… protein…  76639 2.68   6.36e-3        0.0226 \n\n\n\n\n\n\n\n2.1.2 Metabolite Data\nFor metabolite analysis, mapa currently supports Over-Representation Analysis (ORA) only. You only need one identifier column plus any additional metadata (Column names must be in lowercase):\n\nhmdbid: Human Metabolome Database IDs (e.g., “HMDB0000001”, “HMDB0000002”) - Human only\nkeggid: KEGG Compound IDs (e.g., “C00001”, “C00002”) - All organisms\n\n\n\n\n\n\n\nNote\n\n\n\n\nFor human metabolites: You can use either hmdbid or keggid as input\nFor other organisms: Only keggid is supported\nGSEA for metabolites is not currently supported\n\n\n\n\n# Example metabolite input data with KEGG IDs (works for all organisms)\n# metabolite_kegg_data &lt;- readr::read_csv(\"examples/example_metabolite_kegg.csv\", show_col_types = FALSE)\n# head(metabolite_kegg_data)\n\n\n# Example metabolite input data with HMDB IDs (human only)\nmetabolite_hmdb_data &lt;- readr::read_csv(\"examples/example_metabolite_hmdb.csv\", show_col_types = FALSE)\nhead(metabolite_hmdb_data)\n\n# A tibble: 6 × 2\n  metabolite_id hmdbid     \n  &lt;chr&gt;         &lt;chr&gt;      \n1 metabolite_1  HMDB0000060\n2 metabolite_2  HMDB0000056\n3 metabolite_3  HMDB0000064\n4 metabolite_4  HMDB0000092\n5 metabolite_5  HMDB0000134\n6 metabolite_6  HMDB0000123",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#data-conversion",
    "href": "02_input.html#data-conversion",
    "title": "2  Data input and preprocessing",
    "section": "2.2 Data Conversion",
    "text": "2.2 Data Conversion\nIf your data doesn’t contain the required identifier columns in the correct format, MAPA provides the convert_id() function to perform ID conversion.\n\n2.2.1 Basic Usage\nThe convert_id() function converts between different ID types and returns data with all four gene identifier columns:\n# Convert from gene symbols to include all ID types\ngene_data &lt;- data.frame(SYMBOL = c(\"TP53\", \"BRCA1\", \"EGFR\"))  # Note: uppercase input\n\nconverted_data &lt;- convert_id(\n  data = gene_data,\n  query_type = \"gene\",\n  from_id_type = \"symbol\",  # This tells the function what your input column represents\n  organism = \"org.Hs.eg.db\"  # Human organism database\n)\n\nhead(converted_data)\n#        ensembl entrezid uniprot symbol\n#1 ENSG00000141510     7157  P04637   TP53\n#2 ENSG00000012048      672  P38398  BRCA1\n#3 ENSG00000146648     1956  P00533   EGFR\n\n\n2.2.2 Function Parameters\n\ndata: Data frame containing your identifiers\nquery_type: Either \"gene\" or \"metabolite\"\nfrom_id_type: The identifier type in your input data\n\nFor genes: \"ensembl\", \"entrezid\", \"uniprot\", or \"symbol\"\nFor metabolites: \"hmdbid\" or \"keggid\"\n\norganism: Organism database specification\nah_id: AnnotationHub ID (alternative to organism parameter)\nreturn_orgdb: Whether to return the organism database object\n\n\n\n2.2.3 Organism Database Options\n\n2.2.3.1 Option 1: Standard Bioconductor Packages\nFor common model organisms, use standard organism database packages:\n# Human\nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\",\n  from_id_type = \"symbol\",\n  organism = \"org.Hs.eg.db\"\n)\n\n# Mouse  \nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\", \n  from_id_type = \"symbol\",\n  organism = \"org.Mm.eg.db\"\n)\n\n\n2.2.3.2 Option 2: AnnotationHub for Non-Model Organisms\nFor organisms without standard packages, use AnnotationHub IDs:\n# Example: Macaca fascicularis (cynomolgus monkey)\nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\",\n  from_id_type = \"ensembl\",\n  ah_id = \"AH119902\"  # AnnotationHub ID for Macaca fascicularis\n)\n\n\n2.2.3.3 Finding AnnotationHub IDs\nlibrary(AnnotationHub)\nah &lt;- AnnotationHub()\n\n# Search for your organism\nquery_result &lt;- query(ah, c(\"Macaca fascicularis\", \"OrgDb\"))\nprint(query_result)\n\n# Use the ah_id from the results\n\n\n\n2.2.4 Advanced Usage\n\n2.2.4.1 Returning Organism Database Object\nIf you need the organism database for downstream analysis:\nresult &lt;- convert_id(\n  data = gene_data,\n  query_type = \"gene\",\n  from_id_type = \"symbol\",\n  ah_id = \"AH119902\",\n  return_orgdb = TRUE\n)\n\n# Access converted data\nconverted_data &lt;- result$data\n\n# Access organism database\norgdb &lt;- result$orgdb\n\n\n\n2.2.5 Metabolite ID Conversion\nFor metabolite data, convert to KEGG IDs:\n# Convert HMDB IDs to KEGG IDs (human only)\nmetabolite_data &lt;- data.frame(hmdbid = c(\"HMDB0000001\", \"HMDB0000002\"))\n\nconverted_metabolites &lt;- convert_id(\n  data = metabolite_data,\n  query_type = \"metabolite\", \n  from_id_type = \"hmdbid\",\n  organism = \"hsa\"\n)\n\n# Result will include both hmdbid and keggid columns\nhead(converted_metabolites)\n\n\n2.2.6 Preparing Data for GSEA\nIf you’re planning to perform GSEA, ensure you have an appropriate order_by column:\n# Example: Creating order_by column from log2 fold change\nyour_data$order_by &lt;- your_data$log2fc\n\n# Or: Creating signed p-value ranking\nyour_data$order_by &lt;- -log10(your_data$pvalue) * sign(your_data$log2fc)\n\n# Convert IDs while preserving the order_by column\nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\",\n  from_id_type = \"symbol\",\n  organism = \"org.Hs.eg.db\"\n)\n\n# The order_by column is preserved in the output\n\n\n2.2.7 Important Notes\n\nColumn Names: All identifier column names must be lowercase in the final data\nMissing Identifiers: If an identifier cannot be converted, it will be filled with NA\nMultiple Matches: When multiple identifiers exist for one input ID, only the first match is retained\nGSEA Requirements: Don’t forget the order_by column for GSEA analysis\nMetabolite Limitations: Only ORA is available for metabolites; GSEA is not supported\n\n\n\n2.2.8 Troubleshooting Common Issues\n\n2.2.8.1 Issue: “Column not found in data”\nSolution: - Check that your column name matches the from_id_type parameter - Ensure column names are lowercase in your final data\n\n\n2.2.8.2 Issue: “ID type not available in organism database”\nSolution: Check available ID types for your organism:\nlibrary(clusterProfiler)\navailable_types &lt;- idType(your_organism_db)\nprint(available_types)\n\n\n2.2.8.3 Issue: GSEA fails to run\nSolution: - Verify you have an order_by column with numeric values - Check for missing values in the order_by column - Ensure the column contains a good range of values for ranking",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#data-validation-checklist",
    "href": "02_input.html#data-validation-checklist",
    "title": "2  Data input and preprocessing",
    "section": "2.3 Data Validation Checklist",
    "text": "2.3 Data Validation Checklist\nBefore proceeding to enrichment analysis, verify your data meets these requirements:\n\n2.3.1 For Gene ORA:\n\nAt least one identifier column: ensembl, entrezid, uniprot, or symbol (lowercase)\nIdentifier column contains valid IDs for your organism\n\n\n\n2.3.2 For Gene GSEA:\n\nAt least one identifier column: ensembl, entrezid, uniprot, or symbol (lowercase)\n\norder_by column with numeric values for gene ranking\nNo missing values in the order_by column\n\n\n\n2.3.3 For Metabolite ORA:\n\nkeggid column with valid KEGG compound IDs\nData represents human metabolites (if using ID conversion)",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#next-steps",
    "href": "02_input.html#next-steps",
    "title": "2  Data input and preprocessing",
    "section": "2.4 Next Steps",
    "text": "2.4 Next Steps\nOnce your data meets the format requirements, you can proceed to enrichment analysis to begin your MAPA workflow.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#input-data-preprocessing",
    "href": "02_input.html#input-data-preprocessing",
    "title": "2  Data input and preprocessing",
    "section": "2.2 Input Data Preprocessing",
    "text": "2.2 Input Data Preprocessing\nThis step is required - MAPA provides the convert_id() function to perform ID conversion for downstream analysis. Even if your data already contains one of the required identifier columns, you must run this function to ensure all necessary identifiers are present for pathway analysis.\n\n2.2.1 Basic Usage\nThe convert_id() function converts between different ID types and always returns data with all four gene identifier columns (ensembl, entrezid, uniprot, symbol), which are required to work properly.\n\n# Convert from gene symbols to include all ID types\n# gene_data &lt;- data.frame(SYMBOL = c(\"TP53\", \"BRCA1\", \"EGFR\"))  # Note: uppercase input\n# \n# converted_data &lt;- convert_id(\n#   data = gene_data,\n#   query_type = \"gene\",\n#   from_id_type = \"symbol\",  # This tells the function what your input column represents\n#   organism = \"org.Hs.eg.db\"  # Human organism database\n# )\n# \n# head(converted_data)\n#        ensembl entrezid uniprot symbol\n#1 ENSG00000141510     7157  P04637   TP53\n#2 ENSG00000012048      672  P38398  BRCA1\n#3 ENSG00000146648     1956  P00533   EGFR\n\n\n\n2.2.2 Function Parameters\n\ndata: Data frame containing your identifiers\nquery_type: Either \"gene\" or \"metabolite\"\nfrom_id_type: The identifier type in your input data\n\nFor genes: \"ensembl\", \"entrezid\", \"uniprot\", or \"symbol\"\nFor metabolites: \"hmdbid\" or \"keggid\"\n\norganism: Organism database specification\nah_id: AnnotationHub ID (alternative to organism parameter)\nreturn_orgdb: Whether to return the organism database object\n\n\n\n2.2.3 Organism Database Options\n\n2.2.3.1 Option 1: Standard Bioconductor Packages\nFor common model organisms, use standard organism database packages:\n# Human\nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\",\n  from_id_type = \"symbol\",\n  organism = \"org.Hs.eg.db\"\n)\n\n# Mouse  \nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\", \n  from_id_type = \"symbol\",\n  organism = \"org.Mm.eg.db\"\n)\n\n\n2.2.3.2 Option 2: AnnotationHub for Non-Model Organisms\nFor organisms without standard packages, use AnnotationHub IDs:\n# Example: Macaca fascicularis (cynomolgus monkey)\nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\",\n  from_id_type = \"ensembl\",\n  ah_id = \"AH119902\"  # AnnotationHub ID for Macaca fascicularis\n)\n\n\n2.2.3.3 Finding AnnotationHub IDs\nlibrary(AnnotationHub)\nah &lt;- AnnotationHub()\n\n# Search for your organism\nquery_result &lt;- query(ah, c(\"Macaca fascicularis\", \"OrgDb\"))\nprint(query_result)\n\n# Use the ah_id from the results\n\n\n\n2.2.4 Advanced Usage\n\n2.2.4.1 Returning Organism Database Object\nIf you need the organism database for downstream analysis:\nresult &lt;- convert_id(\n  data = gene_data,\n  query_type = \"gene\",\n  from_id_type = \"symbol\",\n  ah_id = \"AH119902\",\n  return_orgdb = TRUE\n)\n\n# Access converted data\nconverted_data &lt;- result$data\n\n# Access organism database\norgdb &lt;- result$orgdb\n\n\n\n2.2.5 Metabolite ID Conversion\nFor metabolite data, convert to KEGG IDs:\n# Convert HMDB IDs to KEGG IDs (human only)\nmetabolite_data &lt;- data.frame(hmdbid = c(\"HMDB0000001\", \"HMDB0000002\"))\n\nconverted_metabolites &lt;- convert_id(\n  data = metabolite_data,\n  query_type = \"metabolite\", \n  from_id_type = \"hmdbid\",\n  organism = \"hsa\"\n)\n\n# Result will include both hmdbid and keggid columns\nhead(converted_metabolites)\n\n\n2.2.6 Preparing Data for GSEA\nIf you’re planning to perform GSEA, ensure you have an appropriate order_by column:\n# Example: Creating order_by column from log2 fold change\nyour_data$order_by &lt;- your_data$log2fc\n\n# Or: Creating signed p-value ranking\nyour_data$order_by &lt;- -log10(your_data$pvalue) * sign(your_data$log2fc)\n\n# Convert IDs while preserving the order_by column\nconverted_data &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\",\n  from_id_type = \"symbol\",\n  organism = \"org.Hs.eg.db\"\n)\n\n# The order_by column is preserved in the output\n\n\n2.2.7 Important Notes\n\nColumn Names: All identifier column names must be lowercase in the final data\nMissing Identifiers: If an identifier cannot be converted, it will be filled with NA\nMultiple Matches: When multiple identifiers exist for one input ID, only the first match is retained\nGSEA Requirements: Don’t forget the order_by column for GSEA analysis\nMetabolite Limitations: Only ORA is available for metabolites; GSEA is not supported\n\n\n\n2.2.8 Troubleshooting Common Issues\n\n2.2.8.1 Issue: “Column not found in data”\nSolution: - Check that your column name matches the from_id_type parameter - Ensure column names are lowercase in your final data\n\n\n2.2.8.2 Issue: “ID type not available in organism database”\nSolution: Check available ID types for your organism:\nlibrary(clusterProfiler)\navailable_types &lt;- idType(your_organism_db)\nprint(available_types)\n\n\n2.2.8.3 Issue: GSEA fails to run\nSolution: - Verify you have an order_by column with numeric values - Check for missing values in the order_by column - Ensure the column contains a good range of values for ranking",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  }
]