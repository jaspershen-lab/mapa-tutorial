[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mapa tutorial",
    "section": "",
    "text": "Overview",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#mapa-functional-module-annotation-for-pathway-analysis-results-using-llm",
    "href": "index.html#mapa-functional-module-annotation-for-pathway-analysis-results-using-llm",
    "title": "mapa tutorial",
    "section": "mapa: Functional Module Annotation for Pathway Analysis Results Using LLM",
    "text": "mapa: Functional Module Annotation for Pathway Analysis Results Using LLM\nmapa is a streamlined workflow for pathway-enrichment analysis and enrichment result interpretation that turns large omics datasets into clear biological insight. It:\n\nDetects enriched pathways from your data via over-representation analysis (ORA) or gene set enrichment analysis (GSEA).\nClusters overlapping or functional-related pathways into functional modules, so every informative pathway—not just the “top 5 or 10”—contributes to the story.\nSummarises each module with large-language models (LLM) (e.g., ChatGPT), linking the results to the latest findings in literature from PubMed.\n\nThe outcome is a fast, reproducible, and user-friendly pipeline that reduces redundancy and delivers biologically meaningful interpretations for enrichment results.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#aim-of-this-tutorial",
    "href": "index.html#aim-of-this-tutorial",
    "title": "mapa tutorial",
    "section": "Aim of This Tutorial",
    "text": "Aim of This Tutorial\nThis guide walks you through the two faces of mapa: the R package for command-line workflows and the Shiny app for point-and-click exploration. By the end, with your gene/metabolite list as input, you will be able to:\n\nMerge overlapping enriched pathways into informative functional modules.\nGenerate biological interpretations of each module with large-language models.\nCreate publication-ready visuals of enrichment results, module networks, and pathway–molecule relationships.\nExport a comprehensive report that gathers every table, figure, and LLM-based summary in one place.\n\nWhether you favour the command line or a browser, the tutorial gives you everything you need to apply MAPA confidently in your bioinformatics projects.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "01_package_installation.html",
    "href": "01_package_installation.html",
    "title": "1  Installation",
    "section": "",
    "text": "Follow the steps below to install the latest development version of mapa from GitHub (the script first installs BiocManager and remotes if you don’t have them):\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n install.packages(\"BiocManager\") \n}\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n install.packages(\"remotes\") \n}\n\nremotes::install_github(\n  \"jaspershen-lab/mapa\",\n  dependencies = TRUE,\n  repos = BiocManager::repositories(),\n  upgrade = \"ask\"\n)",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "02_input.html",
    "href": "02_input.html",
    "title": "2  Data input and preprocessing",
    "section": "",
    "text": "2.1 Input Data Format Requirements\nThis chapter covers the input data requirements for mapa analysis, including the expected data formats and data preprocessing for converting your data to the required format.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#input-data-format-requirements",
    "href": "02_input.html#input-data-format-requirements",
    "title": "2  Data input and preprocessing",
    "section": "",
    "text": "2.1.1 Gene Expression Data\nmapa accepts gene expression data with flexible identifier requirements, depending on your analysis type. Your input data must contain at least one of the following identifier columns:\n\nensembl: Ensembl gene IDs (e.g., “ENSG00000141510”)\nentrezid: NCBI Entrez gene IDs (e.g., “7157”)\nuniprot: UniProtKB accession numbers (e.g., “P04637”)\nsymbol: Gene symbols (e.g., “TP53”)\n\n\n\n\n\n\n\nImportant\n\n\n\nColumn names must be in lowercase.\n\n\n\nOver-Representation Analysis (ORA)Gene Set Enrichment Analysis (GSEA)\n\n\nFor ORA, you only need one identifier column plus any additional metadata:\n\n# Example ORA input data\nora_data &lt;- readr::read_csv(\"examples/example_ora_gene_data.csv\")\nhead(ora_data)\n# # A tibble: 6 × 2\n#   variable_id ensembl        \n#   &lt;chr&gt;       &lt;chr&gt;          \n# 1 gene_1      ENSG00000100097\n# 2 gene_2      ENSG00000139193\n# 3 gene_3      ENSG00000163513\n# 4 gene_4      ENSG00000127863\n# 5 gene_5      ENSG00000115604\n# 6 gene_6      ENSG00000153002\n\n\n\nFor GSEA, you need:\n\nOne identifier column (ensembl, entrezid, uniprot, or symbol)\nAn order_by column containing numeric values to rank genes (This is used to create the ranked gene list required for GSEA. Common choices like Log2 fold change values, pvalue)\n\n\n# Example GSEA input data\ngsea_data &lt;- readr::read_csv(\"examples/example_gsea_data.csv\")\nhead(gsea_data)\n# # A tibble: 6 × 8\n#   variable_id ensembl         genename                                                 genetype       length     fc  p_value p_value_adjust\n#   &lt;chr&gt;       &lt;chr&gt;           &lt;chr&gt;                                                    &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;\n# 1 gene_1      ENSG00000160072 ATPase family AAA domain containing 3B                   protein-coding  26084 0.358  0.00517         0.0202 \n# 2 gene_11     ENSG00000157911 peroxisomal biogenesis factor 10                         protein-coding   9834 0.234  0.000261        0.00514\n# 3 gene_12     ENSG00000269896 small nuclear ribonucleoprotein polypeptide N pseudogene pseudo            214 0.0665 0.00884         0.0277 \n# 4 gene_16     ENSG00000157933 SKI proto-oncogene                                       protein-coding  82826 0.232  0.000220        0.00490\n# 5 gene_29     ENSG00000149527 phospholipase C eta 2                                    protein-coding  79553 0.0373 0.00720         0.0244 \n# 6 gene_31     ENSG00000171621 splA/ryanodine receptor domain and SOCS box containing 1 protein-coding  76639 2.68   0.00636         0.0226 \n\n\n\n\n\n\n2.1.2 Metabolite Data\nFor metabolite analysis, mapa currently supports Over-Representation Analysis (ORA) only. You only need one identifier column plus any additional metadata (Column names must be in lowercase):\n\nhmdbid: Human Metabolome Database IDs (e.g., “HMDB0000001”, “HMDB0000002”) - Human only\nkeggid: KEGG Compound IDs (e.g., “C00001”, “C00002”) - All organisms\n\n\n\n\n\n\n\nNote\n\n\n\n\nFor human metabolites: You can use either hmdbid or keggid as input\nFor other organisms: Only keggid is supported\nGSEA for metabolites is not currently supported\n\n\n\n\n# Example metabolite input data with HMDB IDs (human only)\nmetabolite_data &lt;- readr::read_csv(\"examples/example_metabolite_data.csv\")\nhead(metabolite_data)\n# # A tibble: 6 × 4\n#   variable_id    keggid      fdr score\n#   &lt;chr&gt;          &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n# 1 M441T680_2_NEG NA     3.59e-16  1.11\n# 2 M448T566_NEG   C05466 5.12e- 3  1.13\n# 3 M229T462_NEG   C02678 7.43e- 4  1.20\n# 4 M367T590_NEG   C04555 2.28e- 4  1.34\n# 5 M221T50_POS    C13008 7.99e- 3  1.36\n# 6 M544T604_POS   C04230 1.19e-18  1.53",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#input-data-preprocessing",
    "href": "02_input.html#input-data-preprocessing",
    "title": "2  Data input and preprocessing",
    "section": "2.2 Input Data Preprocessing",
    "text": "2.2 Input Data Preprocessing\nThis step is required except for non-human metabolite analysis - mapa provides the convert_id() function to perform ID conversion for downstream analysis. Even if your data already contains one of the required identifier columns, you must run this function to ensure all necessary identifiers are present for pathway analysis.\n\n2.2.1 Gene ID conversion\nThe convert_id() function converts between different ID types and always returns data with all four gene identifier columns (ensembl, entrezid, uniprot, symbol), which are required for mapa to work properly. Since organism-specific annotation database are required for ID conversion and the following enrichment analysis, choose the ID conversion method based on your organism.\n\nModel OrganismsNon-Model Organisms\n\n\nFor common model organisms, use standard organism database Bioconductor packages.\n\n\n\n\n\n\nNote\n\n\n\nFor most model organisms, Bioconductor already supplies curated organism annotation databases (the OrgDb packages). You can browse the complete list and install the one that matches your species of interest here.\n\n\n\n# Human\nvariable_info &lt;- convert_id(\n  data = ora_data,\n  query_type = \"gene\",\n  from_id_type = \"ensembl\",  # This tells the function what your input column represents\n  organism = \"org.Hs.eg.db\"  # install the package at first\n)\nhead(variable_info)\n# # A tibble: 6 × 5\n#   ensembl         entrezid uniprot    symbol   variable_id\n#   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;      \n# 1 ENSG00000100097 3956     A0A384MR27 LGALS1   gene_1     \n# 2 ENSG00000139193 939      B2RDZ0     CD27     gene_2     \n# 3 ENSG00000163513 7048     A0AAQ5BI03 TGFBR2   gene_3     \n# 4 ENSG00000127863 55504    Q9NS68     TNFRSF19 gene_4     \n# 5 ENSG00000115604 8809     Q13478     IL18R1   gene_5     \n# 6 ENSG00000153002 1360     O60834     CPB1     gene_6  \n\n\n\nFor organisms without standard packages, use AnnotationHub IDs:\n\nnon_model_org_dt &lt;- readr::read_csv(\"examples/example_non_model_org_data.csv\")\n# Macaca fascicularis (taxid: 9541)\nvariable_info &lt;- convert_id(\n  data = non_model_org_dt,\n  query_type = \"gene\",\n  from_id_type = \"ensembl\",\n  ah_id = \"AH119902\",  # AnnotationHub ID for Macaca fascicularis\n  return_orgdb = TRUE  # The organism database is needed for downstream analysis\n)\n\n# Successfully loaded organism database from AnnotationHub\n# Database information:\n# OrgDb object:\n# | DBSCHEMAVERSION: 2.1\n# | DBSCHEMA: NOSCHEMA_DB\n# | ORGANISM: Simia fascicularis\n# | SPECIES: Simia fascicularis\n# | CENTRALID: GID\n# | Taxonomy ID: 9541\n# | Db type: OrgDb\n# | Supporting package: AnnotationDbi\n# \n# Please see: help('select') for usage information\n# Note: The following ID types are not available in the organism database and will be filled with NA: uniprot\n# Available ID types in database: ACCNUM, ALIAS, ENSEMBL, ENTREZID, EVIDENCE, EVIDENCEALL, GENENAME, GID, GO, GOALL, ONTOLOGY, ONTOLOGYALL, PMID, REFSEQ, SYMBOL, UNIGENE\n# 'select()' returned 1:many mapping between keys and columns\n# Warning in clusterProfiler::bitr(geneID = data[[from_id_type]], fromType = from_clusterprofiler_type,  :\n#   57.38% of input gene IDs are fail to map...\n\nvariable_info\n# $data\n# # A tibble: 183 × 8\n#    ensembl            entrezid  uniprot symbol       Symbol  `Gene type`    Tissue     Cluster  \n#    &lt;chr&gt;              &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt;      &lt;chr&gt;    \n#  1 ENSMFAG00000000264 NA        NA      NA           APH1B   protein_coding Liver (LL) Cluster U\n#  2 ENSMFAG00000000283 NA        NA      NA           PLCG1   protein_coding Liver (LL) Cluster U\n#  3 ENSMFAG00000000444 102141791 NA      EPS15L1      EPS15L1 protein_coding Liver (LL) Cluster U\n#  4 ENSMFAG00000000464 NA        NA      NA           RCOR3   protein_coding Liver (LL) Cluster U\n#  5 ENSMFAG00000000583 101865185 NA      EXOC7        EXOC7   protein_coding Liver (LL) Cluster U\n#  6 ENSMFAG00000000608 NA        NA      NA           CD99    protein_coding Liver (LL) Cluster U\n#  7 ENSMFAG00000000627 102121020 NA      MTFMT        MTFMT   protein_coding Liver (LL) Cluster U\n#  8 ENSMFAG00000000639 NA        NA      NA           GJC2    protein_coding Liver (LL) Cluster U\n#  9 ENSMFAG00000000737 101866375 NA      MKRN1        MKRN1   protein_coding Liver (LL) Cluster U\n# 10 ENSMFAG00000000852 102131151 NA      LOC102131151 CYB5R1  protein_coding Liver (LL) Cluster U\n# # ℹ 173 more rows\n# # ℹ Use `print(n = ...)` to see more rows\n# \n# $orgdb\n# OrgDb object:\n# | DBSCHEMAVERSION: 2.1\n# | DBSCHEMA: NOSCHEMA_DB\n# | ORGANISM: Simia fascicularis\n# | SPECIES: Simia fascicularis\n# | CENTRALID: GID\n# | Taxonomy ID: 9541\n# | Db type: OrgDb\n# | Supporting package: AnnotationDbi\n# Please see: help('select') for usage information\n\n\n\n\n\n\n\nTip\n\n\n\nHow to find AnnotationHub IDs according to taxid?\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"AnnotationHub\")\n\nlibrary(AnnotationHub)\nah &lt;- AnnotationHub()\n# Search for your organism database by taxid (here taxid is \"9541\")\nquery_result &lt;- AnnotationHub::query(ah, c(\"OrgDb\", \"9541\"))\n# Use the ah_id from the results\nquery_result$ah_id\n# [1] \"AH119899\" \"AH119900\" \"AH119901\" \"AH119902\"\n\n\n\n\n\n\n\n\n2.2.2 Metabolite ID Conversion\nFor human metabolite data, convert IDs bwteen KEGG and HMDB:\n\n# Convert KEGG IDs to HMDB IDs (human only)\nvariable_info &lt;- convert_id(\n  data = metabolite_data,\n  query_type = \"metabolite\", \n  from_id_type = \"keggid\",\n  organism = \"hsa\" # KEGG organism code\n)\n\n# Result will include both hmdbid and keggid columns\nhead(variable_info)\n# # A tibble: 6 × 5\n#   variable_id  keggid      fdr score hmdbid     \n#   &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n# 1 M448T566_NEG C05466 5.12e- 3  1.13 HMDB0000637\n# 2 M229T462_NEG C02678 7.43e- 4  1.20 HMDB0000623\n# 3 M367T590_NEG C04555 2.28e- 4  1.34 HMDB0001032\n# 4 M221T50_POS  C13008 7.99e- 3  1.36 HMDB0006240\n# 5 M544T604_POS C04230 1.19e-18  1.53 HMDB0002815\n# 6 M544T604_POS C04230 1.19e-18  1.53 HMDB0010380",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#next-steps",
    "href": "02_input.html#next-steps",
    "title": "2  Data input and preprocessing",
    "section": "2.3 Next Steps",
    "text": "2.3 Next Steps\nOnce your data meets the format requirements, you can proceed to enrichment analysis to begin your mapa workflow.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "03_enrichment_analysis.html",
    "href": "03_enrichment_analysis.html",
    "title": "3  Enrichment Analysis",
    "section": "",
    "text": "3.1 Gene-based Enrichment\nThe mapa package provides two powerful functions for pathway enrichment analysis: enrich_pathway() for Over-Representation Analysis (ORA) and do_gsea() for Gene Set Enrichment Analysis (GSEA). Both functions support multiple databases and can handle both gene and metabolite data (for metabolite, currently supports ORA only). Here we provide a unified, streamlined workflow that eliminates the need to run separate analyses for different databases, allowing you to analyze multiple databases simultaneously in a single function call.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Enrichment Analysis</span>"
    ]
  },
  {
    "objectID": "03_enrichment_analysis.html#gene-based-enrichment",
    "href": "03_enrichment_analysis.html#gene-based-enrichment",
    "title": "3  Enrichment Analysis",
    "section": "",
    "text": "3.1.1 Supported Databases and Keytypes\nThe mapa package leverages the powerful enrichment functions from the clusterProfiler package for pathway analysis. The following table shows which databases you can use for your organism and the supported key types:\n\n\n\nDatabase\nSupported Organism\nKeytype Options\n\n\n\n\nGene Ontology (GO)\nAny organism with OrgDb object (organism annotation database package from Bioconductor or OrgDb object retrieved from AnnotationHub, see Section 2.2.1)\nAny keyType supported by your OrgDb object\n\n\nKEGG\nAll KEGG organisms\n\"kegg\", \"ncbi-geneid\", \"ncbi-proteinid\", \"uniprot\"\n\n\nReactome\nhuman, rat, mouse, celegans, yeast, zebrafish, fly, bovine, canine, chicken\nENTREZID only\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nTo check available GO keytype for your organism:\nFor model organisms with Bioconductor annotation packages\n\n## For model organisms with Bioconductor annotation packages\nlibrary(org.Hs.eg.db)\nAnnotationDbi::keytypes(org.Hs.eg.db)\n# [1] \"ACCNUM\" \"ALIAS\" \"ENSEMBL\" \"ENSEMBLPROT\" \"ENSEMBLTRANS\" \"ENTREZID\" \"ENZYME\"  \"EVIDENCE\" \"EVIDENCEALL\" \"GENENAME\"    \n# [11] \"GENETYPE\" \"GO\" \"GOALL\" \"IPI\" \"MAP\" \"OMIM\" \"ONTOLOGY\" \"ONTOLOGYALL\" \"PATH\" \"PFAM\"        \n# [21] \"PMID\" \"PROSITE\" \"REFSEQ\" \"SYMBOL\" \"UCSCKG\" \"UNIPROT\" \n\nFor non-model organisms with annotation OrgDb retrieved from AnnotationHub\n\n# variable_info is the output from the ID conversion step in Chapter 2 - Data Input and Preprocessing\nAnnotationDbi::keytypes(variable_info$orgdb)\n\nFor comprehensive understanding of enrichment analysis concepts, methodologies, we highly recommend reading the Biomedical Knowledge Mining using GOSemSim and clusterProfiler book. This book covers all the underlying methods that mapa uses and will help you make informed decisions about your analysis parameters.\n\n\n\n\n\n3.1.2 Basic Usage\n\nOver-Representation Analysis (ORA)Gene Set Enrichment Analysis (GSEA)\n\n\nUse enrich_pathway() for Over-Representation Analysis.\n\nenriched_pathways &lt;- \n  enrich_pathway(\n    variable_info = variable_info,\n    query_type = \"gene\",\n    database = c(\"go\", \"kegg\", \"reactome\"),\n    # GO parameters\n    go.orgdb = org.Hs.eg.db,\n    go.keytype = \"ENTREZID\",\n    go.ont = \"ALL\",\n    # KEGG parameters\n    kegg.organism = \"hsa\",\n    kegg.keytype = \"kegg\",\n    # Reactome parameters\n    reactome.organism = \"human\",\n    # Statistical parameters\n    pvalueCutoff = 0.05,\n    pAdjustMethod = \"BH\"\n  )\n\n# GO database...\n# KEGG database...\n# Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"...\n# Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"...\n# Reactome database...\n# Done.\n\n\n\nThe do_gsea() function performs GSEA using ranked gene lists based on fold changes or other metrics.\n\ngsea_pathways &lt;- \n  do_gsea(\n    variable_info = variable_info,\n    query_type = \"gene\",\n    order_by = \"fc\",              # Column to rank genes by\n    database = c(\"go\", \"kegg\", \"reactome\"),\n    # Database parameters\n    go.orgdb = org.Hs.eg.db,\n    go.ont = \"ALL\",\n    go.keytype = \"ENTREZID\",\n    kegg.organism = \"hsa\",\n    kegg.keytype = \"kegg\",\n    reactome.organism = \"human\",\n    # GSEA parameters\n    pvalueCutoff = 0.05,\n    pAdjustMethod = \"BH\"\n  )\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nModel organisms: use variable_info directly and package name for go.orgdb\nNon-model organisms: use variable_info$data for parameter variable_info and variable_info$orgdb for go.orgdb",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Enrichment Analysis</span>"
    ]
  },
  {
    "objectID": "03_enrichment_analysis.html#metabolite-based-enrichment",
    "href": "03_enrichment_analysis.html#metabolite-based-enrichment",
    "title": "3  Enrichment Analysis",
    "section": "3.2 Metabolite-based Enrichment",
    "text": "3.2 Metabolite-based Enrichment\n\n3.2.1 Supported Databases and Keytypes\n\n\n\nDatabase\nSupported Organism\nKeytype Options\n\n\n\n\nKEGG\nAll KEGG organisms\nKEGG compound IDs\n\n\nHMDB\nOnly for human\nHMDB IDs\n\n\n\n\n\n3.2.2 Basic Usage\nFor metabolite data, ensure your variable_info contains HMDB IDs and/or KEGG compound IDs.\n\nmet_enriched_pathways &lt;- \n  enrich_pathway(\n    variable_info = met_variable_info,\n    query_type = \"metabolite\",\n    database = c(\"hmdb\", \"metkegg\"),\n    met_organism = \"hsa\",\n    save_to_local = TRUE,\n    pvalueCutoff = 0.05,\n    pAdjustMethod = \"BH\"\n  )",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Enrichment Analysis</span>"
    ]
  },
  {
    "objectID": "03_enrichment_analysis.html#results-interpretation",
    "href": "03_enrichment_analysis.html#results-interpretation",
    "title": "3  Enrichment Analysis",
    "section": "3.3 Results interpretation",
    "text": "3.3 Results interpretation\n\n# View the enrichment analysis summary\nenriched_pathways\n# -------------------- \n# Analysis method: enrich_pathway \n# -------------------- \n# -----------Variable information------------\n# 119  features/markers in total\n# -----------Enrichment results and modules of genes------------\n# -----------GO------------\n# 1025 GO terms with p.adjust &lt; 0.05 \n# No GO modules\n# -----------KEGG------------\n# 48 KEGG pathways with p.adjust &lt; 0.05 \n# No KEGG modules\n# -----------Reactome------------\n# 48 Reactome pathways with p.adjust &lt; 0.05 \n# No Reactome modules\n# -----------Enrichment results and modules of metabolites------------\n# -----------HMDB------------\n# No HMDB results\n# No HMDB modules\n# -----------KEGG Metabolite------------\n# No KEGG metabolite results\n# No KEGG modules\n# -----------Functional modules------------\n# No Functional modules\n# -----------LLM module interpretation------------\n# No LLM module interpretation results\n# -------------------- \n# Processing information\n# 1 processings in total\n# enrich_pathway ---------- \n#   Package    Function.used                Time\n# 1    mapa enrich_pathway() 2025-06-08 14:34:13\n\n\n# Access specific database results\ngo_results &lt;- enriched_pathways@enrichment_go_result\nkegg_results &lt;- enriched_pathways@enrichment_kegg_result\ngo_results\n# over-representation test\n#\n#...@organism    Homo sapiens \n#...@ontology    GOALL \n#...@keytype     ENTREZID \n#...@gene    chr [1:119] \"3956\" \"939\" \"7048\" \"55504\" \"8809\" \"1360\" \"1357\" \"6370\" \"3480\" \"58494\" \"27121\" \"56729\" \"27163\" \"3958\" \"286133\" ...\n#...pvalues adjusted by 'BH' with cutoff &lt;0.05 \n#...0 enriched terms found\n#...Citation\n# S Xu, E Hu, Y Cai, Z Xie, X Luo, L Zhan, W Tang, Q Wang, B Liu, R Wang, W Xie, T Wu, L Xie, G Yu. Using clusterProfiler to characterize multiomics data. Nature Protocols. 2024, 19(11):3292-3320 \n\n\nORA enrichment resultGSEA enrichment result\n\n\n\n# View results data frame\nhead(go_results@result)\n#            ONTOLOGY         ID                                                      Description GeneRatio   BgRatio RichFactor FoldEnrichment   zScore       pvalue\n# GO:0038084       BP GO:0038084             vascular endothelial growth factor signaling pathway    13/116  95/18805 0.13684211       22.18376 16.30756 2.147803e-14\n# GO:0036005       BP GO:0036005                 response to macrophage colony-stimulating factor    11/116  64/18805 0.17187500       27.86301 16.95936 1.713923e-13\n# GO:0035924       BP GO:0035924 cellular response to vascular endothelial growth factor stimulus    13/116 122/18805 0.10655738       17.27424 14.20752 5.888098e-13\n# GO:0006935       BP GO:0006935                                                       chemotaxis    21/116 466/18805 0.04506438        7.30548 10.85886 8.851862e-13\n# GO:0042330       BP GO:0042330                                                            taxis    21/116 468/18805 0.04487179        7.27426 10.82885 9.608949e-13\n# GO:0038145       BP GO:0038145           macrophage colony-stimulating factor signaling pathway    10/116  54/18805 0.18518519       30.02075 16.82498 1.024076e-12\n#                p_adjust       qvalue                                                                                                       geneID Count\n# GO:0038084 5.859206e-11 3.635439e-11                                            3480/28514/1969/1956/64094/2050/5156/7422/8828/2064/5979/2324/780    13\n# GO:0036005 2.337791e-10 1.450520e-10                                                        3480/1435/1969/1956/6696/2050/5156/2064/5979/2324/780    11\n# GO:0035924 4.656131e-10 2.888971e-10                                            3480/28514/1969/1956/64094/2050/5156/7422/8828/2064/5979/2324/780    13\n# GO:0006935 4.656131e-10 2.888971e-10 6370/3958/5919/1435/7040/8633/56477/1969/58191/64094/5054/3491/5156/3569/6359/7422/3082/6360/10457/5328/8828    21\n# GO:0042330 4.656131e-10 2.888971e-10 6370/3958/5919/1435/7040/8633/56477/1969/58191/64094/5054/3491/5156/3569/6359/7422/3082/6360/10457/5328/8828    21\n# GO:0038145 4.656131e-10 2.888971e-10                                                             3480/1435/1969/1956/2050/5156/2064/5979/2324/780    10\n\n\n\n\nhead(gsea_pathways@enrichment_kegg_result@result)\n#                ID                                       Description setSize enrichmentScore      NES       pvalue     p_adjust       qvalue rank\n# hsa05014 hsa05014                     Amyotrophic lateral sclerosis      11       0.6473595 2.500196 0.0001092759 0.0006556554 0.0003450818  218\n# hsa05022 hsa05022 Pathways of neurodegeneration - multiple diseases      11       0.4649904 1.795860 0.0102663060 0.0307989180 0.0162099568  232\n# hsa05010 hsa05010                                 Alzheimer disease      10       0.4709263 1.667865 0.0220601399 0.0441202798 0.0232211999  214\n#                             leading_edge                                            core_enrichment Count\n# hsa05014 tags=100%, list=36%, signal=65% 6390/23435/4720/5690/56893/6391/55706/842/5710/22926/55746    11\n# hsa05022  tags=91%, list=39%, signal=57%         6390/23435/4720/5690/6391/1435/842/5710/22926/9927    10\n# hsa05010  tags=90%, list=36%, signal=59%              6390/10000/4720/5690/6391/1435/842/5710/22926     9\n\n\n\n\nKey columns in enrichment results:\n\nGene ORAGSEAMetabolite ORA\n\n\nCore Information:\n\nID: Pathway identifier (e.g., GO:0042060 for GO, hsa04060 for KEGG, R-HSA-5669034 for Reactome)\nDescription: Pathway name\nONTOLOGY: Biological ontology (for GO only: MF=molecular function, CC=cellular component, BP=biological process)\ncategory/subcategory: KEGG pathway categories (for KEGG only)\n\nStatistical Measures:\n\npvalue: Raw p-value from hypergeometric test (equivalent to one-sided Fisher’s exact test)\np_adjust: Adjusted p-value after multiple testing correction (BH method by default)\nqvalue: Q-value for FDR control. For more information, see ?qvalue::qvalue\n\nGene Mapping:\n\nGeneRatio: Ratio of input genes annotated to this pathway (format: “genes_in_pathway/total_input_genes”)\nBgRatio: Ratio of all genes annotated to this pathway in the background universe (format: “pathway_genes/universe_genes”)\nCount: Total number of genes from input list that match this pathway\ngeneID: Gene IDs that overlap between your gene list and the pathway (separated by “/”)\n\nEnrichment Metrics:\n\nRichFactor: Ratio of input genes annotated to a pathway vs. all genes annotated to this pathway\nFoldEnrichment: Enrichment fold change (GeneRatio divided by BgRatio)\nzScore: Standard deviations away from expected overlap (How unusual or extreme the observed enrichment is compared to what you’d expect by chance. Higher absolute z-score means more “surprising” or significant enrichment.)\n\n\n\nFor GSEA results, additional columns specific to ranked list analysis include:\n\nsetSize: Total number of genes in the gene set/pathway\nenrichmentScore: Degree of overrepresentation at top/bottom of ranked list\nNES: Normalized Enrichment Score - main metric for interpretation\n\nPositive NES: pathway enriched in upregulated genes (pathway activation)\nNegative NES: pathway enriched in downregulated genes (pathway suppression)\n\nrank: Position in ranked list where maximum enrichment score occurred\nleading_edge: Statistics for the leading-edge subset of genes\ncore_enrichment: Core enriched genes that contribute most to the enrichment signal\nCount: Number of core enriched genes\n\n\n\nFor metabolite ORA results, the result structure differs from gene-based analysis:\nPathway Information:\n\npathway_id: Pathway identifier (e.g., SMP0000028 for HMDB pathways)\npathway_name: Name of the metabolic pathway (e.g., “Caffeine Metabolism”)\ndescribtion: Detailed description of the pathway from the corresponding database\npathway_class: Classification of pathway (e.g., “Metabolic;primary_pathway”, “Disease;primary_pathway”)\n\nStatistical Measures:\n\np_value: Raw p-value from enrichment test\np_adjust: Adjusted p-value for multiple testing correction\n\nMetabolite Mapping:\n\nall_id: All metabolite IDs in this pathway (separated by “;”)\nall_number: Total number of metabolites in the pathway\nmapped_id: Your input metabolite IDs that map to this pathway (separated by “;”)\nmapped_number: Number of your metabolites that map to this pathway\nmapped_percentage: Percentage of pathway metabolites covered by your input data\n\n\n\n\nThe enrichment results provide the foundation for downstream similarity analysis and functional module identification in the mapa workflow.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Enrichment Analysis</span>"
    ]
  },
  {
    "objectID": "01_shinyapp_installation.html",
    "href": "01_shinyapp_installation.html",
    "title": "9  Installation",
    "section": "",
    "text": "Follow the steps below to install the latest development version of mapa shinyapp from GitHub (the script first installs BiocManager, remotes, and mapa if you don’t have them):\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n install.packages(\"BiocManager\") \n}\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n install.packages(\"remotes\") \n}\n\nremotes::install_github(\n  \"jaspershen-lab/mapa\",\n  dependencies = TRUE,\n  repos = BiocManager::repositories(),\n  upgrade = \"ask\"\n)\n\nremotes::install_github(\n  \"jaspershen-lab/mapashiny\",\n  dependencies = TRUE,\n  repos        = BiocManager::repositories(),\n  upgrade      = \"ask\"\n)",
    "crumbs": [
      "mapa Shiny App",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation</span>"
    ]
  }
]