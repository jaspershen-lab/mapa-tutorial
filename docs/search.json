[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mapa tutorial",
    "section": "",
    "text": "Overview",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#mapa-functional-module-annotation-for-pathway-analysis-results-using-llm",
    "href": "index.html#mapa-functional-module-annotation-for-pathway-analysis-results-using-llm",
    "title": "mapa tutorial",
    "section": "mapa: Functional Module Annotation for Pathway Analysis Results Using LLM",
    "text": "mapa: Functional Module Annotation for Pathway Analysis Results Using LLM\nmapa is a streamlined workflow for pathway-enrichment analysis and enrichment result interpretation that turns large omics datasets into clear biological insight. It:\n\nDetects enriched pathways from your data via over-representation analysis (ORA) or gene set enrichment analysis (GSEA).\nClusters overlapping or functional-related pathways into functional modules, so every informative pathway—not just the “top 5 or 10”—contributes to the story.\nSummarises each module with large-language models (LLM) (e.g., ChatGPT), linking the results to the latest findings in literature from PubMed.\n\nThe outcome is a fast, reproducible, and user-friendly pipeline that reduces redundancy and delivers biologically meaningful interpretations for enrichment results.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#aim-of-this-tutorial",
    "href": "index.html#aim-of-this-tutorial",
    "title": "mapa tutorial",
    "section": "Aim of This Tutorial",
    "text": "Aim of This Tutorial\nThis guide walks you through the two faces of mapa: the R package for command-line workflows and the Shiny app for point-and-click exploration. By the end, with your gene/metabolite list as input, you will be able to:\n\nMerge overlapping enriched pathways into informative functional modules.\nGenerate biological interpretations of each module with large-language models.\nCreate publication-ready visuals of enrichment results, module networks, and pathway–molecule relationships.\nExport a comprehensive report that gathers every table, figure, and LLM-based summary in one place.\n\nWhether you favour the command line or a browser, the tutorial gives you everything you need to apply MAPA confidently in your bioinformatics projects.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "01_package_installation.html",
    "href": "01_package_installation.html",
    "title": "1  Installation",
    "section": "",
    "text": "Follow the steps below to install the latest development version of mapa from GitHub (the script first installs BiocManager and remotes if you don’t have them):\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n install.packages(\"BiocManager\") \n}\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n install.packages(\"remotes\") \n}\n\nremotes::install_github(\n  \"jaspershen-lab/mapa\",\n  dependencies = TRUE,\n  repos = BiocManager::repositories(),\n  upgrade = \"ask\"\n)",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "02_input.html",
    "href": "02_input.html",
    "title": "2  Data input and preprocessing",
    "section": "",
    "text": "2.1 Input Data Format Requirements\nThis chapter covers the input data requirements for mapa analysis, including the expected data formats and data preprocessing for converting your data to the required format.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#input-data-format-requirements",
    "href": "02_input.html#input-data-format-requirements",
    "title": "2  Data input and preprocessing",
    "section": "",
    "text": "2.1.1 Gene Expression Data\nmapa accepts gene expression data with flexible identifier requirements, depending on your analysis type. Your input data must contain at least one of the following identifier columns:\n\nensembl: Ensembl gene IDs (e.g., “ENSG00000141510”)\nentrezid: NCBI Entrez gene IDs (e.g., “7157”)\nuniprot: UniProtKB accession numbers (e.g., “P04637”)\nsymbol: Gene symbols (e.g., “TP53”)\n\n\n\n\n\n\n\nImportant\n\n\n\nColumn names must be in lowercase.\n\n\n\nOver-Representation Analysis (ORA)Gene Set Enrichment Analysis (GSEA)\n\n\nFor ORA, you only need one identifier column plus any additional metadata:\n\n# Example ORA input data\n\nora_data &lt;- readr::read_csv(\"examples/example_ora_gene_data.csv\", show_col_types = FALSE)\nhead(ora_data)\n\n# A tibble: 6 × 2\n  variable_id ensembl        \n  &lt;chr&gt;       &lt;chr&gt;          \n1 gene_1      ENSG00000100097\n2 gene_2      ENSG00000139193\n3 gene_3      ENSG00000163513\n4 gene_4      ENSG00000127863\n5 gene_5      ENSG00000115604\n6 gene_6      ENSG00000153002\n\n\n\n\nFor GSEA, you need:\n\nOne identifier column (ensembl, entrezid, uniprot, or symbol)\nAn order_by column containing numeric values to rank genes (This is used to create the ranked gene list required for GSEA. Common choices like Log2 fold change values, pvalue)\n\n\n# Example GSEA input data\n\ngsea_data &lt;- readr::read_csv(\"examples/example_gsea_data.csv\", show_col_types = FALSE)\nhead(gsea_data)\n\n# A tibble: 6 × 8\n  variable_id ensembl     genename genetype length     fc p_value p_value_adjust\n  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;\n1 gene_1      ENSG000001… ATPase … protein…  26084 0.358  5.17e-3        0.0202 \n2 gene_11     ENSG000001… peroxis… protein…   9834 0.234  2.61e-4        0.00514\n3 gene_12     ENSG000002… small n… pseudo      214 0.0665 8.84e-3        0.0277 \n4 gene_16     ENSG000001… SKI pro… protein…  82826 0.232  2.20e-4        0.00490\n5 gene_29     ENSG000001… phospho… protein…  79553 0.0373 7.20e-3        0.0244 \n6 gene_31     ENSG000001… splA/ry… protein…  76639 2.68   6.36e-3        0.0226 \n\n\n\n\n\n\n\n2.1.2 Metabolite Data\nFor metabolite analysis, mapa currently supports Over-Representation Analysis (ORA) only. You only need one identifier column plus any additional metadata (Column names must be in lowercase):\n\nhmdbid: Human Metabolome Database IDs (e.g., “HMDB0000001”, “HMDB0000002”) - Human only\nkeggid: KEGG Compound IDs (e.g., “C00001”, “C00002”) - All organisms\n\n\n\n\n\n\n\nNote\n\n\n\n\nFor human metabolites: You can use either hmdbid or keggid as input\nFor other organisms: Only keggid is supported\nGSEA for metabolites is not currently supported\n\n\n\n\n# Example metabolite input data with KEGG IDs (works for all organisms)\n# metabolite_kegg_data &lt;- readr::read_csv(\"examples/example_metabolite_kegg.csv\", show_col_types = FALSE)\n# head(metabolite_kegg_data)\n\n\n# Example metabolite input data with HMDB IDs (human only)\nmetabolite_data &lt;- readr::read_csv(\"examples/example_metabolite_data.csv\", show_col_types = FALSE)\nhead(metabolite_data)\n\n# A tibble: 6 × 4\n  variable_id    keggid      fdr score\n  &lt;chr&gt;          &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 M441T680_2_NEG &lt;NA&gt;   3.59e-16  1.11\n2 M448T566_NEG   C05466 5.12e- 3  1.13\n3 M229T462_NEG   C02678 7.43e- 4  1.20\n4 M367T590_NEG   C04555 2.28e- 4  1.34\n5 M221T50_POS    C13008 7.99e- 3  1.36\n6 M544T604_POS   C04230 1.19e-18  1.53",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#input-data-preprocessing",
    "href": "02_input.html#input-data-preprocessing",
    "title": "2  Data input and preprocessing",
    "section": "2.2 Input Data Preprocessing",
    "text": "2.2 Input Data Preprocessing\nThis step is required except for non-human metabolite analysis - mapa provides the convert_id() function to perform ID conversion for downstream analysis. Even if your data already contains one of the required identifier columns, you must run this function to ensure all necessary identifiers are present for pathway analysis.\n\n2.2.1 Gene ID conversion\nThe convert_id() function converts between different ID types and always returns data with all four gene identifier columns (ensembl, entrezid, uniprot, symbol), which are required for mapa to work properly. Since organism-specific annotation database are required for ID conversion and the following enrichment analysis, choose the ID conversion method based on your organism.\n\nModel OrganismsNon-Model Organisms\n\n\nFor common model organisms, use standard organism database Bioconductor packages.\n\n\n\n\n\n\nNote\n\n\n\nFor most model organisms, Bioconductor already supplies curated organism annotation databases (the OrgDb packages). You can browse the complete list and install the one that matches your species of interest here.\n\n\n\n# Human\nvariable_info &lt;- convert_id(\n  data = ora_data,\n  query_type = \"gene\",\n  from_id_type = \"ensembl\",  # This tells the function what your input column represents\n  organism = \"org.Hs.eg.db\"  # install the package at first\n)\n\n'select()' returned 1:many mapping between keys and columns\n\nhead(variable_info)\n\n# A tibble: 6 × 5\n  ensembl         entrezid uniprot    symbol   variable_id\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;      \n1 ENSG00000100097 3956     A0A384MR27 LGALS1   gene_1     \n2 ENSG00000139193 939      B2RDZ0     CD27     gene_2     \n3 ENSG00000163513 7048     A0AAQ5BI03 TGFBR2   gene_3     \n4 ENSG00000127863 55504    Q9NS68     TNFRSF19 gene_4     \n5 ENSG00000115604 8809     Q13478     IL18R1   gene_5     \n6 ENSG00000153002 1360     O60834     CPB1     gene_6     \n\n\n\n\nFor organisms without standard packages, use AnnotationHub IDs:\n\n# Macaca fascicularis (taxid: 9541)\nvariable_info &lt;- convert_id(\n  data = your_data,\n  query_type = \"gene\",\n  from_id_type = \"ensembl\",\n  ah_id = \"AH119902\",  # AnnotationHub ID for Macaca fascicularis\n  return_orgdb = TRUE  # The organism database is needed for downstream analysis\n)\n\n\n\n\n\n\n\nTip\n\n\n\nHow to find AnnotationHub IDs according to taxid?\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"AnnotationHub\")\n\nlibrary(AnnotationHub)\nah &lt;- AnnotationHub()\n# Search for your organism database by taxid (here taxid is \"9541\")\nquery_result &lt;- AnnotationHub::query(ah, c(\"OrgDb\", \"9541\"))\n# Use the ah_id from the results\nquery_result$ah_id\n\n\n\n\n\n\n\n\n2.2.2 Metabolite ID Conversion\nFor human metabolite data, convert IDs bwteen KEGG and HMDB:\n\n# Convert KEGG IDs to HMDB IDs (human only)\nvariable_info &lt;- convert_id(\n  data = metabolite_data,\n  query_type = \"metabolite\", \n  from_id_type = \"keggid\",\n  organism = \"hsa\" # KEGG organism code\n)\n\n# Result will include both hmdbid and keggid columns\nhead(variable_info)\n\n# A tibble: 6 × 5\n  variable_id  keggid      fdr score hmdbid     \n  &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n1 M448T566_NEG C05466 5.12e- 3  1.13 HMDB0000637\n2 M229T462_NEG C02678 7.43e- 4  1.20 HMDB0000623\n3 M367T590_NEG C04555 2.28e- 4  1.34 HMDB0001032\n4 M221T50_POS  C13008 7.99e- 3  1.36 HMDB0006240\n5 M544T604_POS C04230 1.19e-18  1.53 HMDB0002815\n6 M544T604_POS C04230 1.19e-18  1.53 HMDB0010380",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "02_input.html#next-steps",
    "href": "02_input.html#next-steps",
    "title": "2  Data input and preprocessing",
    "section": "2.3 Next Steps",
    "text": "2.3 Next Steps\nOnce your data meets the format requirements, you can proceed to enrichment analysis to begin your mapa workflow.",
    "crumbs": [
      "mapa R Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data input and preprocessing</span>"
    ]
  },
  {
    "objectID": "01_shinyapp_installation.html",
    "href": "01_shinyapp_installation.html",
    "title": "9  Installation",
    "section": "",
    "text": "Follow the steps below to install the latest development version of mapa shinyapp from GitHub (the script first installs BiocManager, remotes, and mapa if you don’t have them):\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n install.packages(\"BiocManager\") \n}\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n install.packages(\"remotes\") \n}\n\nremotes::install_github(\n  \"jaspershen-lab/mapa\",\n  dependencies = TRUE,\n  repos = BiocManager::repositories(),\n  upgrade = \"ask\"\n)\n\nremotes::install_github(\n  \"jaspershen-lab/mapashiny\",\n  dependencies = TRUE,\n  repos        = BiocManager::repositories(),\n  upgrade      = \"ask\"\n)",
    "crumbs": [
      "mapa Shiny App",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation</span>"
    ]
  }
]